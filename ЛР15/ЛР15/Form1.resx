<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>